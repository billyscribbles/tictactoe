{"version":3,"sources":["components/Square.js","components/Board.js","services/gameServices.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","color","value","Button","className","onClick","Board","i","this","squares","Grid","Row","renderSquare","React","Component","gameServices","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","xIsNext","stepNumber","draw","slice","setState","concat","step","status","fontColor","current","winner","moves","map","move","desc","List","Item","key","jumpTo","Container","fluid","Header","Column","width","handleClick","as","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.752ed515.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { Button } from 'semantic-ui-react'\r\n\r\nimport './Square.css'\r\n\r\nfunction Square(props) {\r\n  let color\r\n\r\n  if (props.value === 'X') {\r\n    color = 'red'\r\n  }\r\n\r\n  if (props.value === 'O') {\r\n    color = 'blue'\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      className=\"square-button\"\r\n      //Creating an arrow function allows us not to write \"this\" and also not to fire every render\r\n      //Functions do not need ()=> this.props.onClick(), parentheses on both side.\r\n      onClick={props.onClick}\r\n      color={color}\r\n    >\r\n      {props.value}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default Square\r\n","import React from 'react'\r\n\r\nimport Square from './Square'\r\n\r\nimport { Grid } from 'semantic-ui-react'\r\n\r\nimport './Board.css'\r\nclass Board extends React.Component {\r\n  //Move to game component\r\n  // constructor(props) {\r\n  //   super(props)\r\n  //   this.state = {\r\n  //     squares: Array(9).fill(null),\r\n  //     xiSNext: true\r\n  //   }\r\n  // }\r\n\r\n  //Square state looks like this:\r\n  // [\r\n  //   'O', null, 'X',\r\n  //   'X', 'X', 'O',\r\n  //   'O', null, null,\r\n  // ]\r\n\r\n  //In React it's conventional to use on[Event] names for props which represents events\r\n  //and handle[Event] for the methods which handles the event\r\n\r\n  //There are 2 ways of changing data:\r\n  //  Directly mutate the data by directly changinge the data's value\r\n  //  **Replace the data with a new copy which has the desired changes\r\n\r\n  //Replacing data with a new copy allows us:\r\n  // to keep previous versions intact to allow undo and redo\r\n  // detecing changes becomes difficult, as it is modified directly\r\n  // helps to build pure components, immutable data can easily determine if changes has been made\r\n\r\n  // handleClick(i) {\r\n  //   //Slice creats a copy of the array, we did not pass a parameter, so it copies the entire array\r\n  //   //We modify the \"copy array\" and modify the array at position \"i\" with \"X\" and save this new array as our current state\r\n  //   const squares = this.state.squares.slice()\r\n\r\n  //   //To ignore a click if someone has won the game or if a square is already filled\r\n  //   if (gameServices.calculateWinner(squares) || squares[i]) {\r\n  //     //Return ends this function\r\n  //     return\r\n  //   }\r\n\r\n  //   squares[i] = this.state.xiSNext ? 'X' : 'O'\r\n  //   this.setState({ squares: squares, xiSNext: !this.state.xiSNext })\r\n  // }\r\n\r\n  renderSquare(i) {\r\n    //Each square will now recieve a value prop that will either X, O or null\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid>\r\n        <Grid.Row className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </Grid.Row>\r\n        <Grid.Row className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </Grid.Row>\r\n        <Grid.Row className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </Grid.Row>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\nexport default Board\r\n","const gameServices = { calculateWinner }\r\n\r\nfunction calculateWinner(squares) {\r\n  //All win conditions\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ]\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i]\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a]\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nexport default gameServices\r\n","import React from 'react'\r\nimport Board from './Board'\r\n\r\nimport { Container, List, Header, Button, Grid } from 'semantic-ui-react'\r\n\r\nimport gameServices from '../services/gameServices'\r\n\r\nimport './Game.css'\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n      draw: false\r\n    }\r\n  }\r\n\r\n  handleClick(i) {\r\n    // const history = this.state.history\r\n    // We do not grab the entire history anymore, but only grab from 0 the start to the current step number + 1\r\n    // This slice will only retain up to the button and throw away all future steps made previously\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1)\r\n\r\n    const current = history[history.length - 1]\r\n    const squares = current.squares.slice()\r\n    if (gameServices.calculateWinner(squares) || squares[i]) {\r\n      return\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\r\n\r\n    //We are creating a history array that holds an array of squares from 0-8 with null\r\n    //Upon click we are creating a new array using sliece called squares\r\n    //We concat this array to the current null array (initial) and add it to our \"history\"\r\n    //History will container an array of null then an array of null + 1 input and so on\r\n\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    })\r\n  }\r\n\r\n  //Lift state up to \"Game\" component to determine which square was clicked\r\n\r\n  // history = [\r\n  //   // Before first move\r\n  //   {\r\n  //     squares: [\r\n  //       null, null, null,\r\n  //       null, null, null,\r\n  //       null, null, null,\r\n  //     ]\r\n  //   },\r\n  //   // After first move\r\n  //   {\r\n  //     squares: [\r\n  //       null, null, null,\r\n  //       null, 'X', null,\r\n  //       null, null, null,\r\n  //     ]\r\n  //   },\r\n  //   // After second move\r\n  //   {\r\n  //     squares: [\r\n  //       null, null, null,\r\n  //       null, 'X', null,\r\n  //       null, null, 'O',\r\n  //     ]\r\n  //   },\r\n  //   // ...\r\n  // ]\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history\r\n    // const current = history[history.length - 1]\r\n    // Instead of rendering the last move, we are now rendering the currently selected move according to stepNumber\r\n    const current = history[this.state.stepNumber]\r\n    const winner = gameServices.calculateWinner(current.squares)\r\n\r\n    //Here we will use the map function to iterate through our array\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? 'Go to move #' + move : 'Go to start of game'\r\n\r\n      return (\r\n        <List.Item key={move}>\r\n          <Button className=\"history-button\" onClick={() => this.jumpTo(move)}>\r\n            {desc}\r\n          </Button>\r\n        </List.Item>\r\n      )\r\n    })\r\n\r\n    let status\r\n    if (winner) {\r\n      status = 'Winner: ' + winner\r\n    } else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')\r\n    }\r\n\r\n    let fontColor\r\n    if (winner === 'X') {\r\n      fontColor = 'red'\r\n    }\r\n    if (winner === 'O') {\r\n      fontColor = 'blue'\r\n    }\r\n\r\n    let draw\r\n\r\n    if (this.state.stepNumber === 9 && winner === null) {\r\n      draw = true\r\n    }\r\n\r\n    return (\r\n      <Container fluid className=\"game-container\">\r\n        <br />\r\n        <Header>TicTacToe</Header>\r\n        <br />\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column width={8}>\r\n              <Board\r\n                squares={current.squares}\r\n                onClick={i => this.handleClick(i)}\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={8}>\r\n              {/* Need to add status */}\r\n              <Header as=\"h3\">{status}</Header>\r\n              {/* Need to add history */}\r\n              <List>{moves}</List>\r\n              {winner ? (\r\n                <Header color={fontColor}>\r\n                  Winner, Winner, Chicken Dinner!\r\n                </Header>\r\n              ) : null}\r\n              {draw ? <Header>Draw ! It's a Tie!</Header> : null}\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n        <br />\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game\r\n","import React, { Component } from 'react'\n\nimport Game from './components/Game'\nimport 'semantic-ui-css/semantic.min.css'\n\nclass App extends Component {\n  render() {\n    return <Game />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}